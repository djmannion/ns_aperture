#! /usr/bin/env python

import os
import argparse

import ns_aperture.config, ns_aperture.fmri_analysis.paths
import ns_aperture.fmri_analysis.preproc
import ns_aperture.fmri_analysis.figures
import ns_aperture.fmri_analysis.group_exp_analysis

def main():
	"""Execution function"""

	desc = """Runs a group analysis step in the natural scene apertures
	          fMRI experiment"""

	eg = """
	Steps:
	  agg : aggregates across subjects
	
	---N.B.---
	
	* The script must be run from the ns_aperture/fmri_analysis/bin directory.
	
	"""

	target_dir = "ns_aperture/fmri_analysis/bin"

	current_dir = os.getcwd()

	if current_dir[ -len( target_dir ): ] != target_dir:
		raise IOError( "Script needs to be launched from %s" % target_dir )

	# use this formatter so we can supply our own indentation
	fmt = argparse.RawDescriptionHelpFormatter

	parser = argparse.ArgumentParser( description = desc,
	                                  epilog = eg,
	                                  formatter_class = fmt,
	                                )

	proc_steps = ( "uni", "mvpa"
	             )

	parser.add_argument( "proc_step",
	                     choices = proc_steps,
	                     help = "Processing step"
	                   )

	args = parser.parse_args()

	# load the experiment / subject info
	conf = ns_aperture.config.get_conf()
	paths = ns_aperture.fmri_analysis.paths.get_group_paths( conf )

	if args.proc_step == "uni":
		ns_aperture.fmri_analysis.figures.plot_uni( paths, conf )

	elif args.proc_step == "mvpa":
		ns_aperture.fmri_analysis.figures.plot_mvpa( paths, conf )

	elif args.proc_step == "glm":
		ns_aperture.fmri_analysis.exp_analysis.glm( paths, conf )

	elif args.proc_step == "beta_to_psc":
		ns_aperture.fmri_analysis.exp_analysis.beta_to_psc( paths, conf )

	elif args.proc_step == "roi_xtr":
		ns_aperture.fmri_analysis.exp_analysis.roi_xtr( paths, conf )

	elif args.proc_step == "roi_mean":
		ns_aperture.fmri_analysis.exp_analysis.roi_mean( paths, conf )

	else:
		print "Not completed"


if __name__ == "__main__":
	main()
