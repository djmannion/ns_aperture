#! /usr/bin/env python

"""Runs a pre-processing step for a subject in the natural scenes aperture fMRI
experiment"""

import argparse
import os

import ns_aperture.config
import ns_aperture.fmri_analysis.preproc

desc = """Runs a pre-processing step for a subject in the natural scenes aperture
fMRI experiment"""

eg = """
Example usage:
  run motion correction on subject s1000:
    ns_aperture_preproc s1000 correct

Steps:
  convert : converts the scanner DICOM images to NIFTIs.
  correct : performs slice-timing and motion correction.
  fieldmap : prepares the fieldmaps.
  undistort : applies distortion correction to the functional data.
  roi-img : converts ROIs to NIFTI masks.
  roi : converts ROI masks to coordinates.
  vtc : extracts voxel timecourses for each voxel in each ROI.
  vtc-cull : culls voxels in each ROI based on their mean-normed variance.
  vtc-avg : averages over (selected) voxels in each ROI.
  design : extracts the session design matrix.

---N.B.---

* The script must be run from the ns_aperture/bin directory.

"""

target_dir = "ns_aperture/fmri_analysis/bin"

current_dir = os.getcwd()

if current_dir[ -len( target_dir ): ] != target_dir:
	raise IOError( "Script needs to be launched from %s" % target_dir )

# use this formatter so we can supply our own indentation
fmt = argparse.RawDescriptionHelpFormatter

parser = argparse.ArgumentParser( description = desc,
                                  epilog = eg,
                                  formatter_class = fmt,
                                )

parser.add_argument( "subj_id",
                     help = "Subject identifier"
                   )

preproc_steps = ( "convert",
                  "correct",
                  "fieldmaps",
                  "undistort",
                  "roi-img",
                  "roi",
                  "vtc",
                  "design",
                  "localiser",
                  "vox-select",
                  "vtc-avg"
                )

parser.add_argument( "preproc_step",
                     choices = preproc_steps,
                     help = "Preprocessing step"
                   )

args = parser.parse_args()

# check the arguments are valid
if len( args.subj_id ) != 5 or args.subj_id[ 0 ] != "s":
	raise ValueError( "Subject ID needs to be in the format of sXXXX" )

# load the experiment / subject info
subj_conf = ns_aperture.config.get_subj_conf( args.subj_id )
subj_paths = ns_aperture.config.get_subj_paths( args.subj_id )

conf = ns_aperture.config.get_conf()

if args.preproc_step == "convert":
	ns_aperture.fmri_analysis.preproc.convert( subj_paths )

elif args.preproc_step == "correct":
	ns_aperture.fmri_analysis.preproc.st_motion_correct( subj_paths,
	                                                     conf,
	                                                     subj_conf
	                                                   )

elif args.preproc_step == "fieldmaps":
	ns_aperture.fmri_analysis.preproc.fieldmaps( subj_paths,
	                                             conf,
	                                             subj_conf
	                                           )

elif args.preproc_step == "undistort":
	ns_aperture.fmri_analysis.preproc.unwarp( subj_paths,
	                                          conf
	                                        )

elif args.preproc_step == "roi-img":
	ns_aperture.fmri_analysis.preproc.make_roi_images( subj_paths,
	                                                   conf
	                                                 )

elif args.preproc_step == "roi":
	ns_aperture.fmri_analysis.preproc.prepare_rois( subj_paths,
	                                                conf
	                                              )

elif args.preproc_step == "vtc":
	ns_aperture.fmri_analysis.preproc.form_vtcs( subj_paths,
	                                             conf,
	                                             subj_conf
	                                           )

elif args.preproc_step == "design":
	ns_aperture.fmri_analysis.preproc.get_design( subj_paths,
	                                              conf,
	                                              subj_conf,
	                                            )

elif args.preproc_step == "localiser":
	ns_aperture.fmri_analysis.preproc.localiser_analysis( subj_paths,
	                                                      conf
	                                                    )


elif args.preproc_step == "vox-select":
	ns_aperture.fmri_analysis.preproc.voxel_selection( subj_paths,
	                                                   conf
	                                                 )

elif args.preproc_step == "vtc-avg":
	ns_aperture.fmri_analysis.preproc.avg_vtcs( subj_paths,
	                                            conf
	                                          )


elif args.preproc_step == "task":
	ns_aperture.analysis.preproc.get_task( subj_paths,
	                                           conf[ "exp" ],
	                                           subj_conf
	                                         )

else:
	print "Not completed"
