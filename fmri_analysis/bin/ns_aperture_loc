#! /usr/bin/env python

"""Runs a single-subject analysis step in the Glass coherence block fMRI
experiment"""

import os
import argparse

import ns_aperture.config, ns_aperture.fmri_analysis.paths
import ns_aperture.fmri_analysis.preproc
import ns_aperture.fmri_analysis.subj_analysis
import ns_aperture.fmri_analysis.localiser

def main():
	"""Execution function"""

	desc = """Runs a single-subject analysis step in the Glass coherence block
	          fMRI experiment"""

	eg = """
	Example usage:
	  run the GLM on subject s1000:
	    ns_aperture_subj_analysis s1000 glm
	
	Steps:
	  glm : executes the GLM analysis.
	  loc_mask : generates a localising mask from the GLM.
	  beta_to_psc : converts the fitted beta values to percent signal change.
	  roi_xtr : extracts the ROI statistics.
	  raw_adj : computes the raw and predicted timecourses, adjusted.
	  roi_tc : compiles raw and predicted timecourses for each ROI.
	
	---N.B.---
	
	* The script must be run from the ns_aperture/bin directory.
	
	"""

	target_dir = "ns_aperture/fmri_analysis/bin"

	current_dir = os.getcwd()

	if current_dir[ -len( target_dir ): ] != target_dir:
		raise IOError( "Script needs to be launched from %s" % target_dir )

	# use this formatter so we can supply our own indentation
	fmt = argparse.RawDescriptionHelpFormatter

	parser = argparse.ArgumentParser( description = desc,
	                                  epilog = eg,
	                                  formatter_class = fmt,
	                                )

	parser.add_argument( "subj_id",
	                     help = "Subject identifier"
	                   )

	proc_steps = ( "glm",
	               "parcellate",
	               "loc_mask",
	               "beta_to_psc",
	               "roi_xtr",
	               "raw_adj",
	               "roi_tc"
	             )

	parser.add_argument( "proc_step",
	                     choices = proc_steps,
	                     help = "Processing step"
	                   )

	args = parser.parse_args()

	# check the arguments are valid
	if len( args.subj_id ) != 5 or args.subj_id[ 0 ] != "s":
		raise ValueError( "Subject ID needs to be in the format of sXXXX" )

	# load the experiment / subject info
	conf = ns_aperture.config.get_conf( args.subj_id )
	paths = ns_aperture.fmri_analysis.paths.get_subj_paths( conf )

	if args.proc_step == "glm":
		ns_aperture.fmri_analysis.localiser.loc_glm( paths, conf )

	elif args.proc_step == "parcellate":
		ns_aperture.fmri_analysis.localiser.loc_parcellate( paths, conf )

	elif args.proc_step == "loc_mask":
		ns_aperture.fmri_analysis.subj_analysis.loc_mask( paths, conf )

	elif args.proc_step == "beta_to_psc":
		ns_aperture.fmri_analysis.subj_analysis.beta_to_psc( paths, conf )

	elif args.proc_step == "roi_xtr":
		ns_aperture.fmri_analysis.subj_analysis.roi_xtr( paths, conf )

	elif args.proc_step == "raw_adj":
		ns_aperture.fmri_analysis.subj_analysis.raw_adj( paths, conf )

	elif args.proc_step == "roi_tc":
		ns_aperture.fmri_analysis.subj_analysis.roi_tc( paths, conf )

	else:
		print "Not completed"


if __name__ == "__main__":
	main()
